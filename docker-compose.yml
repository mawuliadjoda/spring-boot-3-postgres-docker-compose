

services:
  app:
    image: spring-boot-3-postgres-docker-compose:latest
    container_name: app
    #image: docker.io/library/spring-boot-3-postgres-docker-compose:0.0.1-SNAPSHOT
    #build:
    #  context: .
    #  dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mydatabase
      DB_SCHEMA: my_schema
      DB_USERNAME: root
      DB_PASSWORD: password
      #SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase?currentSchema=my_schema
      #SPRING_DATASOURCE_USERNAME: root
      #SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - my_network
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d mydatabase"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      #- postgres_data:/var/lib/postgresql/data
      - ./postgres_data:/var/lib/postgresql/data
      - ./sql/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pg-admin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@adjoda.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    networks:
      - my_network
    volumes:
      - pgadmin_date:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_date:

networks:
  my_network:
    driver: bridge